package Compiler;

import java_cup.runtime.*;
import ir.ast.*;

/*	keywords	*/
terminal BOOL_TYPE, FLOAT_TYPE, INT_TYPE, VOID_TYPE, BREAK, CLASS_DECL, CONT, ELSE, EXTERN, BOOL_LITERAL, FOR, IF, RET, WHILE; 

/*	assign operators	*/
terminal ASSIGN, ASSIGNP, ASSIGNM;

/*	arith operators	*/
terminal SEMI, DOC, COMMA, PLUS, MINUS, TIMES, DIV, MOD, UMINUS;

/*	eq operators	*/
terminal EQUAL, DISTINCT;

/*	rel operators	*/
terminal SMALLER, BIGGER, LTOE, GTOE;   

/*	cond operators	*/
terminal AND, OR, NOT;

/*		*/
terminal  LPAREN, RPAREN, LBRACE, RBRACE, LBRACKET, RBRACKET;
terminal Integer INTNUMBER;
terminal Float REALNUMBER;
terminal String ID;

non terminal program, class_decl, class_decl_list, field_decl, method_decl, method_decl_list,
			 body, block, type, statement, statement_list, assign_op, method_call, attribute_access_list, attribute_access,params,
			 location, expr, literal, field_decl_list,id_name_list,id_name, return_st, params_decl_list, params_decl ;

precedence left LBRACE, RBRACE;
precedence left LPAREN,RPAREN;
precedence left LBRACKET, RBRACKET;
precedence left AND ;
precedence left OR ;
precedence nonassoc SMALLER,BIGGER,LTOE,GTOE,EQUAL,DISTINCT; 
precedence left PLUS, MINUS;
precedence left TIMES,DIV,MOD;
precedence left NOT, UMINUS;
precedence left ELSE;

start with program;

program             	::= class_decl_list:cdN1 
						;

class_decl_list        	::= class_decl_list:cD1 class_decl:cD2
						| class_decl:cD3 
						;

class_decl          	::= CLASS_DECL ID:i1 LBRACE field_decl_list:fd1 method_decl_list:md1 RBRACE
						| CLASS_DECL ID:i1 LBRACE method_decl_list:md1 RBRACE
						| CLASS_DECL ID:i1 LBRACE field_decl_list:fd1 RBRACE
						| CLASS_DECL ID:i1 LBRACE RBRACE 
						;

field_decl_list    		::= field_decl_list field_decl 
						|  field_decl 
						;

field_decl          	::= type:t1 id_name_list:af1 SEMI 
						;

id_name_list			::= id_name_list COMMA id_name
						| id_name 
						;
 
id_name		      		::= ID:i5 LBRACKET INTNUMBER:il1 RBRACKET
						| ID:i4 
						;

method_decl_list		::= method_decl_list method_decl
						| method_decl
						;

method_decl         	::= type:t1 ID:i7 LPAREN RPAREN body:bo1
						| type:t1 ID:i7 LPAREN params_decl_list RPAREN body:bo1 
						; 

params_decl_list		::= params_decl_list COMMA params_decl
						| params_decl
						;

params_decl 			::= type:t3 ID:i8 
						;

body 					::= block:bl1 
						| EXTERN SEMI 
						;

block					::= LBRACE field_decl_list:fdl3  statement_list:s1 RBRACE
						| LBRACE field_decl_list RBRACE
						| LBRACE statement_list:s1 RBRACE
						| LBRACE RBRACE 
						;

type					::= INT_TYPE 
						| FLOAT_TYPE 
						| BOOL_TYPE 
						| ID:i10 
						| VOID_TYPE 
						;

statement_list			::= statement_list:sL1 statement:s1
						| statement:s1 
						;

statement				::=  location:l1 assign_op:ao1 expr:e1 SEMI
						| method_call:mc1 SEMI
						| IF LPAREN expr:e2 RPAREN statement:s2 
						| IF LPAREN expr:e2 RPAREN statement:s2 ELSE statement:s3
						| FOR ID:i11 ASSIGN expr:e3 COMMA expr statement
						| WHILE expr:e3 statement
						| return_st
						| BREAK SEMI
						| CONT SEMI
						| SEMI
					 	| block:bl2 
					 	;

return_st 				::= RET expr SEMI
						| RET SEMI 
						;

assign_op  				::= ASSIGN 
						| ASSIGNP 
						| ASSIGNM 
						;

method_call         	::= ID attribute_access_list:amc11 LPAREN params:p2 RPAREN
						| ID attribute_access_list:amc11 LPAREN RPAREN
						| ID LPAREN params:p2 RPAREN
						| ID LPAREN  RPAREN 
						; 

params					::= params COMMA expr
						| expr 
						;

attribute_access_list 	::= attribute_access_list attribute_access
						| attribute_access 
						;

attribute_access		::= DOC ID 
						;

location 				::= ID 
						| ID attribute_access_list:amc13 
						| ID LBRACKET expr RBRACKET
						| ID attribute_access_list LBRACKET expr RBRACKET
						;

expr					::= location:l2
						| method_call:mc2
						| literal:li1
						| LPAREN expr:e4 RPAREN
						| expr:e4 AND expr:e5
						| expr:e4 OR expr:e5
						| expr:e4 PLUS expr:e5 
						| expr:e4 MINUS expr:e5 
						| expr:e4 TIMES expr:e5 
						| expr:e4 DIV expr:e5
						| expr:e4 MOD expr:e5
						| expr:e4 SMALLER expr:e5
						| expr:e4 BIGGER expr:e5
						| expr:e4 LTOE expr:e5
						| expr:e4 GTOE expr:e5
						| expr:e4 EQUAL expr:e5
						| expr:e4 DISTINCT expr:e5
						| MINUS expr:e6 %prec UMINUS
						| NOT expr:e7
						;

literal  				::= INTNUMBER 
						| REALNUMBER 
						| BOOL_LITERAL 
						;
